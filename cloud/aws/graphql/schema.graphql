# type User {
#   id: ID!
#   username: String
#   boards: [Board]
# }

type Clip {
  clipId: ID!
  caption: String!
}

input ClipsInput {
  clipId: ID!
  caption: String!
}

type Fields {
  bucket: String!
  X_Amz_Algorithm: String!
  X_Amz_Credential: String!
  X_Amz_Date: String!
  X_Amz_Security_Token: String!
  Policy: String!
  X_Amz_Signature: String!
}

type Token {
  key: String!
  fields: Fields!
}

type Duplicate {
  duplicate: ID!
}

union TokenResult = Token | Duplicate

type Board {
  id: ID!
  title: String
  owner: String
  created: AWSDateTime
  updated: AWSDateTime
  # favorites: Number
  # favorited: Boolean
  clips: [Clip]
}

input CreateBoardInput {
  title: String
  # clips: [Clip]
}

input UpdateBoardInput {
  id: ID!
  title: String
}

type Query {
  getBoardById(id: String!): Board
  listBoards(nextToken: String): [Board]
}

type Mutation {
  createBoard(board: CreateBoardInput!): Board
  updateBoard(board: UpdateBoardInput!): Board
  deleteBoard(id: ID!): ID

  createToken(hash: String!, size: Int!): TokenResult!

  createClips(boardId: ID!, clips: [ClipsInput!]): [Clip]
}

# type Subscription {
#   onCreateBoard: Board
#     @aws_subscribe(mutations: ["createBoard"])
#   onDeleteBoard: String
#     @aws_subscribe(mutations: ["deleteBoard"])
#   onUpdateBoard: Board
#     @aws_subscribe(mutations: ["updateBoard"])
# }

type Schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}
